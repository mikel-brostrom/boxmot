name: BoxMOT CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  tracking-methods:
    runs-on: ${{ matrix.os }}
    outputs:
      status: ${{ job.status }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-14]
        python-version: ['3.12']
    env:
      TRACKERS: "ocsort bytetrack botsort deepocsort strongsort boosttrack hybridsort"
    timeout-minutes: 50
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Install requirements
        shell: bash
        run: |
          python -m pip install --upgrade pip setuptools wheel uv
          sed -i'' -e 's/index = "torch-gpu"/index = "torch-cpu"/g' pyproject.toml
          uv sync --group yolo
      - name: Generate detections and embeddings
        run: |
          source .venv/bin/activate
          boxmot generate --source ./assets/MOT17-mini/train --yolo-model yolov10n.pt --imgsz 320 --reid-model osnet_x0_25_msmt17.pt
      - name: Run tracking method(s)
        run: |
          source .venv/bin/activate
          for tracker in $TRACKERS; do
            boxmot track --yolo-model yolov10n.pt --reid-model osnet_x0_25_msmt17.pt --imgsz 320 --tracking-method $tracker
          done

  evolution:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.9', '3.12']
    outputs:
      status: ${{ job.status }}
    timeout-minutes: 50
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Install requirements
        shell: bash
        run: |
          python -m pip install --upgrade pip setuptools wheel uv
          sed -i'' -e 's/index = "torch-gpu"/index = "torch-cpu"/g' pyproject.toml
          uv sync --group yolo --group evolve
      - name: Evolve set of parameters for selected tracking method
        run: |
          source .venv/bin/activate
          boxmot tune --yolo-model yolov8n.pt --reid-model osnet_x0_25_msmt17.pt --n-trials 3 --tracking-method strongsort --source ./assets/MOT17-mini/train --ci

  mot-metrics-benchmark:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.9', '3.12']
    outputs:
      status: ${{ job.status }}
    env:
      TRACKERS: "ocsort bytetrack botsort deepocsort strongsort boosttrack hybridsort"
    timeout-minutes: 50
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Install requirements
        shell: bash
        run: |
          sed -i'' -e 's/index = "torch-gpu"/index = "torch-cpu"/g' pyproject.toml
          sudo apt-get update
          sudo apt-get install -y jq
          python -m pip install --upgrade pip setuptools wheel uv
          uv sync --group yolo
      - name: Generate detections and embeddings
        run: |
          source .venv/bin/activate
          boxmot generate --source ./assets/MOT17-mini/train --yolo-model yolov10n.pt --reid-model osnet_x0_25_msmt17.pt --imgsz 320 --classes 0
      - name: Evaluation and Summarize Results
        shell: bash
        run: |
          source .venv/bin/activate
          echo "Format,Status❔,HOTA,MOTA,IDF1" > results.csv
          for tracker in $TRACKERS; do
            if boxmot eval --yolo-model yolov10n.pt --reid-model osnet_x0_25_msmt17.pt --tracking-method $tracker --verbose --source ./assets/MOT17-mini/train --ci; then
              STATUS="✅"
            else
              STATUS="❌"
            fi
            cat ${tracker}_output.json
            HOTA=$(jq -r '.HOTA' ${tracker}_output.json)
            MOTA=$(jq -r '.MOTA' ${tracker}_output.json)
            IDF1=$(jq -r '.IDF1' ${tracker}_output.json)
            TRACKER_NAME=$(echo $tracker | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2))}')
            echo "$TRACKER_NAME,$STATUS,$HOTA,$MOTA,$IDF1" >> results.csv
          done
          (head -n 1 results.csv && tail -n +2 results.csv | sort -t, -k3 -nr) > sorted_results.csv
          column -s, -t sorted_results.csv > pretty_results.txt
      - name: Show Results
        shell: bash
        run: |
          cat pretty_results.txt

  tracking-with-pose:
    runs-on: ubuntu-latest
    outputs:
      status: ${{ job.status }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - run: |
          sed -i'' -e 's/index = "torch-gpu"/index = "torch-cpu"/g' pyproject.toml
          python -m pip install --upgrade pip setuptools wheel uv
          uv sync --group yolo
      - name: Test tracking with pose models
        env:
          IMG: ./assets/MOT17-mini/train/MOT17-02-FRCNN/img1/000001.jpg
        run:  |
          source .venv/bin/activate
          boxmot track --yolo-model weights/yolov8n-pose.pt --imgsz 320 --source $IMG

  tracking-with-yolos:
    runs-on: ubuntu-latest
    outputs:
      status: ${{ job.status }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: |
          sed -i'' -e 's/index = "torch-gpu"/index = "torch-cpu"/g' pyproject.toml
          python -m pip install --upgrade pip setuptools wheel uv
          # Make setuptools pick clang instead of gcc
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
          uv sync --only-group yolox-build-deps
          uv sync --group yolo
      - name: Test tracking with various yolo models
        env:
          IMG: ./assets/MOT17-mini/train/MOT17-02-FRCNN/img1/000001.jpg
        run: |
          source .venv/bin/activate
          uv pip list
          boxmot track --yolo-model yolov10n.pt --imgsz 320 --source $IMG
          boxmot track --yolo-model yolox_n.pt --imgsz 320 --source $IMG
          boxmot track --yolo-model rf-detr-base.pt --imgsz 320 --source $IMG

  tracking-with-seg:
    runs-on: ubuntu-latest
    outputs:
      status: ${{ job.status }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          sed -i'' -e 's/index = "torch-gpu"/index = "torch-cpu"/g' pyproject.toml
          python -m pip install --upgrade pip setuptools wheel uv
          uv sync --group yolo
      - name: Test tracking with seg models
        env:
          IMG: ./assets/MOT17-mini/train/MOT17-02-FRCNN/img1/000001.jpg
        run: |
          source .venv/bin/activate
          boxmot track --tracking-method bytetrack --yolo-model yolov8n-seg.pt --source $IMG

  export-reid-models:
    runs-on: ubuntu-latest
    outputs:
      status: ${{ job.status }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install dependencies
        run: |
          sed -i'' -e 's/index = "torch-gpu"/index = "torch-cpu"/g' pyproject.toml
          python -m pip install --upgrade pip setuptools wheel uv
          uv sync --all-groups
          # needed for TFLite export
          sudo apt-get update
          sudo apt-get install -y flatbuffers-compiler
          wget https://github.com/PINTO0309/onnx2tf/releases/download/1.16.31/flatc.tar.gz
          tar -zxvf flatc.tar.gz
          sudo chmod +x flatc
          sudo mv flatc /usr/bin/
      - name: Export models
        run: |
          source .venv/bin/activate
          python boxmot/appearance/reid/export.py --include torchscript onnx openvino tflite --device cpu --batch-size 3 --dynamic
      - name: Check exported TFLite models
        run: |
          ls boxmot/engine/weights/osnet_x0_25_msmt17_saved_model/
      - name: Upload exported reid models (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: reid-models-${{ runner.os }}-py311
          if-no-files-found: error
          path: |
            boxmot/engine/weights/osnet_x0_25_msmt17.*
            boxmot/engine/weights/osnet_x0_25_msmt17_openvino_model*
            boxmot/engine/weights/osnet_x0_25_msmt17_saved_model/**

  reid-inference-smoke-test:
    needs: [export-reid-models]
    runs-on: ubuntu-latest
    outputs:
      status: ${{ job.status }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install runtime deps
        run: |
          sed -i'' -e 's/index = "torch-gpu"/index = "torch-cpu"/g' pyproject.toml
          python -m pip install --upgrade pip setuptools wheel uv
          # Only what's needed to run `boxmot track` with reid models
          uv sync --group yolo
      - name: Download exported reid models (artifact)
        uses: actions/download-artifact@v4
        with:
          name: reid-models-${{ runner.os }}-py311
          path: boxmot/engine/weights
      - name: Smoke test inference with exported models
        env:
          IMG: ./assets/MOT17-mini/train/MOT17-02-FRCNN/img1/000001.jpg
        run: |
          source .venv/bin/activate
          boxmot track --reid-model boxmot/engine/weights/osnet_x0_25_msmt17.torchscript    --imgsz 320 --source $IMG
          boxmot track --reid-model boxmot/engine/weights/osnet_x0_25_msmt17.onnx           --imgsz 320 --source $IMG
          boxmot track --reid-model boxmot/engine/weights/osnet_x0_25_msmt17_openvino_model --imgsz 320 --source $IMG
          boxmot track --reid-model boxmot/engine/weights/osnet_x0_25_msmt17_saved_model/osnet_x0_25_msmt17_float32.tflite --source $IMG --imgsz 320

  tests:
    needs: [export-reid-models]
    runs-on: ubuntu-latest
    outputs:
      status: ${{ job.status }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install test deps
        run: |
          sed -i'' -e 's/index = "torch-gpu"/index = "torch-cpu"/g' pyproject.toml
          python -m pip install --upgrade pip uv
          uv pip install -e . --system --group test --group yolo --group onnx --group openvino --group tflite
      - name: Download exported reid models (artifact)
        uses: actions/download-artifact@v4
        with:
          name: reid-models-${{ runner.os }}-py311
          path: boxmot/engine/weights
      - name: Pytest tests
        env:
          PACKAGE_DIR: boxmot
          COVERAGE_FAIL_UNDER: 25
        run: |
          pytest --cov=$PACKAGE_DIR --cov-report=html -v -s tests
          coverage report --fail-under=$COVERAGE_FAIL_UNDER

  check-failures:
    needs:
      - tracking-methods
      - mot-metrics-benchmark
      - evolution
      - export-reid-models
      - reid-inference-smoke-test
      - tests
      - tracking-with-pose
      - tracking-with-seg
      - tracking-with-yolos
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Prepare environment variables
        run: |
          echo "tracking-methods_STATUS=${{ needs.tracking-methods.result }}" >> $GITHUB_ENV
          echo "mot-metrics-benchmark_STATUS=${{ needs.mot-metrics-benchmark.result }}" >> $GITHUB_ENV
          echo "evolution_STATUS=${{ needs.evolution.result }}" >> $GITHUB_ENV
          echo "export-reid-models_STATUS=${{ needs.export-reid-models.result }}" >> $GITHUB_ENV
          echo "reid-inference-smoke-test_STATUS=${{ needs.reid-inference-smoke-test.result }}" >> $GITHUB_ENV
          echo "tests_STATUS=${{ needs.tests.result }}" >> $GITHUB_ENV
          echo "tracking-with-pose_STATUS=${{ needs.tracking-with-pose.result }}" >> $GITHUB_ENV
          echo "tracking-with-seg_STATUS=${{ needs.tracking-with-seg.result }}" >> $GITHUB_ENV
          echo "tracking-with-yolos_STATUS=${{ needs.tracking-with-yolos.result }}" >> $GITHUB_ENV
      - name: Check for failures and create summary
        shell: bash
        run: |
          summary=""
          failed=false
          for var in $(printenv | grep '_STATUS$'); do
            job_status="${var##*=}"
            job_name="${var%%=*}"
            if [[ "$job_status" != "success" ]]; then
              summary+="$job_name failed with status: $job_status\n"
              failed=true
            fi
          done
          if [[ "$failed" = false ]]; then
            summary="All jobs succeeded."
          fi
          echo -e "Summary: $summary"
