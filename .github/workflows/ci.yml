name: BoxMOT CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  tracking-methods:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-14]
        python-version: ['3.12']
    timeout-minutes: 50
    # define trackers here so $TRACKERS is available
    env:
      TRACKERS: "ocsort bytetrack botsort deepocsort strongsort boosttrack"
    steps:
      - uses: actions/checkout@v4

      - name: Setup uv & Python
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.7.12"
          python-version: ${{ matrix.python-version }}
          enable-cache: true
          cache-dependency-glob: "uv.lock"
          cache-local-path: ${{ runner.temp }}/.uv-cache

      - name: Prepare & Sync
        run: |
          sed -i'' -e 's/index = "torch-gpu"/index = "torch-cpu"/g' pyproject.toml
          uv python install
          uv sync --group yolo

      - name: Generate detections and embeddings
        run: |
          source .venv/bin/activate
          boxmot generate-dets-embs \
            --source ./assets/MOT17-mini/train \
            --yolo-model yolov10n.pt \
            --imgsz 320 \
            --reid-model osnet_x0_25_msmt17.pt

      - name: Run tracking method
        run: |
          source .venv/bin/activate
          for tracker in $TRACKERS; do
            boxmot track \
              --yolo-model yolov10n.pt \
              --reid-model osnet_x0_25_msmt17.pt \
              --imgsz 320 \
              --tracking-method $tracker
          done
    # export the job’s status so check-failures can see it
    outputs:
      status: ${{ job.status }}

  evolution:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.12']
    timeout-minutes: 50
    steps:
      - uses: actions/checkout@v4

      - name: Setup uv & Python
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.7.12"
          python-version: ${{ matrix.python-version }}
          enable-cache: true
          cache-dependency-glob: "uv.lock"
          cache-local-path: ${{ runner.temp }}/.uv-cache

      - name: Prepare & Sync
        run: |
          sed -i'' -e 's/index = "torch-gpu"/index = "torch-cpu"/g' pyproject.toml
          uv python install
          uv sync --group yolo --group evolve

      - name: Evolve parameters
        run: |
          source .venv/bin/activate
          boxmot tune \
            --yolo-model yolov8n.pt \
            --reid-model osnet_x0_25_msmt17.pt \
            --n-trials 3 \
            --tracking-method strongsort \
            --source ./assets/MOT17-mini/train \
            --ci
    outputs:
      status: ${{ job.status }}

  mot-metrics-benchmark:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.12']
    timeout-minutes: 50
    env:
      TRACKERS: "ocsort bytetrack botsort deepocsort strongsort boosttrack"
    steps:
      - uses: actions/checkout@v4

      - name: Setup uv & Python
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.7.12"
          python-version: ${{ matrix.python-version }}
          enable-cache: true
          cache-dependency-glob: "uv.lock"
          cache-local-path: ${{ runner.temp }}/.uv-cache

      - name: Prepare & Sync
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          sed -i'' -e 's/index = "torch-gpu"/index = "torch-cpu"/g' pyproject.toml
          uv python install
          uv sync --group yolo

      - name: Generate dets & embs
        run: |
          source .venv/bin/activate
          boxmot generate-dets-embs \
            --source ./assets/MOT17-mini/train \
            --yolo-model yolov10n.pt \
            --reid-model osnet_x0_25_msmt17.pt \
            --imgsz 320 \
            --classes 0

      - name: Evaluate & summarize
        run: |
          source .venv/bin/activate
          echo "Format,Status,HOTA,MOTA,IDF1" > results.csv
          for tracker in $TRACKERS; do
            if boxmot eval \
                 --yolo-model yolov8n.pt \
                 --reid-model osnet_x0_25_msmt17.pt \
                 --tracking-method $tracker \
                 --verbose \
                 --source ./assets/MOT17-mini/train \
                 --ci; then
              STATUS="✅"
            else
              STATUS="❌"
            fi
            HOTA=$(jq -r '.HOTA' ${tracker}_output.json)
            MOTA=$(jq -r '.MOTA' ${tracker}_output.json)
            IDF1=$(jq -r '.IDF1' ${tracker}_output.json)
            NAME=$(echo $tracker | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2))}')
            echo "$NAME,$STATUS,$HOTA,$MOTA,$IDF1" >> results.csv
          done
          (head -n1 results.csv && tail -n +2 results.csv | sort -t, -k3 -nr) > sorted_results.csv
          column -s, -t sorted_results.csv > pretty_results.txt

      - name: Show Results
        run: cat pretty_results.txt
    outputs:
      status: ${{ job.status }}

  # … (other jobs all follow the same pattern: 1) Setup uv & Python, 2) uv python install, 3) uv sync, 4) your commands …, 5) outputs.status)

  check-failures:
    needs:
      - tracking-methods
      - evolution
      - mot-metrics-benchmark
      # … all the rest …
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Summarize job results
        run: |
          summary=""
          for job in tracking-methods evolution mot-metrics-benchmark export-reid-models tests tracking-with-pose tracking-with-seg tracking-with-yolos; do
            status="${{ needs[job].outputs.status }}"
            if [[ "$status" != "success" ]]; then
              summary+="$job failed with $status\n"
            fi
          done
          if [[ -z "$summary" ]]; then
            echo "All jobs succeeded."
          else
            echo -e "$summary"
          fi
