name: BoxMOT CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  tracking-methods:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-14]
        python-version: ['3.12']
    env:
      UV_CACHE_DIR: ${{ github.workspace }}/.cache/uv
    timeout-minutes: 50
    steps:
      - uses: actions/checkout@v4

      - name: Restore pip, venv & uv caches
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ./.venv
            ${{ env.UV_CACHE_DIR }}
          key: deps-${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml','**/uv.lock') }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install requirements
        shell: bash
        run: |
          if [[ "$OSTYPE" == "darwin"* ]]; then
            sed -i '' 's/source="torch_cuda121"/source="torchcpu"/g' pyproject.toml
          else
            sed -i 's/source="torch_cuda121"/source="torchcpu"/g' pyproject.toml
          fi
          python -m pip install --upgrade pip setuptools wheel uv
          uv sync --group yolo

      - name: Generate detections and embeddings
        run: |
          source .venv/bin/activate
          boxmot generate-dets-embs \
            --source ./assets/MOT17-mini/train \
            --yolo-model yolov10n.pt \
            --imgsz 320 \
            --reid-model osnet_x0_25_msmt17.pt

      - name: Run tracking method
        run: |
          source .venv/bin/activate
          for tracker in $TRACKERS; do
            boxmot track \
              --yolo-model yolov10n.pt \
              --reid-model osnet_x0_25_msmt17.pt \
              --imgsz 320 \
              --tracking-method $tracker
          done

  evolution:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.9', '3.12']
    env:
      UV_CACHE_DIR: ${{ github.workspace }}/.cache/uv
    timeout-minutes: 50
    steps:
      - uses: actions/checkout@v4

      - name: Restore pip, venv & uv caches
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ./.venv
            ${{ env.UV_CACHE_DIR }}
          key: deps-${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml','**/uv.lock') }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install requirements
        shell: bash
        run: |
          if [[ "$OSTYPE" == "darwin"* ]]; then
            sed -i '' 's/source="torch_cuda121"/source="torchcpu"/g' pyproject.toml
          else
            sed -i 's/source="torch_cuda121"/source="torchcpu"/g' pyproject.toml
          fi
          python -m pip install --upgrade pip setuptools wheel uv
          uv sync --group yolo --group evolve

      - name: Evolve parameters
        run: |
          source .venv/bin/activate
          boxmot tune \
            --yolo-model yolov8n.pt \
            --reid-model osnet_x0_25_msmt17.pt \
            --n-trials 3 \
            --tracking-method strongsort \
            --source ./assets/MOT17-mini/train \
            --ci

  mot-metrics-benchmark:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.9', '3.12']
    env:
      UV_CACHE_DIR: ${{ github.workspace }}/.cache/uv
      TRACKERS: "ocsort bytetrack botsort deepocsort strongsort boosttrack"
    timeout-minutes: 50
    steps:
      - uses: actions/checkout@v4

      - name: Restore pip, venv & uv caches
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ./.venv
            ${{ env.UV_CACHE_DIR }}
          key: deps-${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml','**/uv.lock') }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install requirements
        shell: bash
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          if [[ "$OSTYPE" == "darwin"* ]]; then
            sed -i '' 's/source="torch_cuda121"/source="torchcpu"/g' pyproject.toml
          else
            sed -i 's/source="torch_cuda121"/source="torchcpu"/g' pyproject.toml
          fi
          python -m pip install --upgrade pip setuptools wheel uv
          uv sync --group yolo

      - name: Generate detections and embeddings
        run: |
          source .venv/bin/activate
          boxmot generate-dets-embs \
            --source ./assets/MOT17-mini/train \
            --yolo-model yolov10n.pt \
            --reid-model osnet_x0_25_msmt17.pt \
            --imgsz 320 \
            --classes 0

      - name: Evaluate & summarize
        shell: bash
        run: |
          source .venv/bin/activate
          echo "Format,Status,HOTA,MOTA,IDF1" > results.csv
          for tracker in $TRACKERS; do
            if boxmot eval \
                --yolo-model yolov8n.pt \
                --reid-model osnet_x0_25_msmt17.pt \
                --tracking-method $tracker \
                --verbose \
                --source ./assets/MOT17-mini/train \
                --ci; then
              STATUS="✅"
            else
              STATUS="❌"
            fi
            HOTA=$(jq -r '.HOTA' ${tracker}_output.json)
            MOTA=$(jq -r '.MOTA' ${tracker}_output.json)
            IDF1=$(jq -r '.IDF1' ${tracker}_output.json)
            NAME=$(echo $tracker | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2))}')
            echo "$NAME,$STATUS,$HOTA,$MOTA,$IDF1" >> results.csv
          done
          (head -n1 results.csv && tail -n +2 results.csv | sort -t, -k3 -nr) > sorted_results.csv
          column -s, -t sorted_results.csv > pretty_results.txt

      - name: Show Results
        run: cat pretty_results.txt

  tracking-with-pose:
    runs-on: ubuntu-latest
    env:
      UV_CACHE_DIR: ${{ github.workspace }}/.cache/uv
      IMG: ./assets/MOT17-mini/train/MOT17-02-FRCNN/img1/000001.jpg
    steps:
      - uses: actions/checkout@v4

      - name: Restore pip, venv & uv caches
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ./.venv
            ${{ env.UV_CACHE_DIR }}
          key: deps-${{ runner.os }}-py3.12-${{ hashFiles('**/pyproject.toml','**/uv.lock') }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          if [[ "$OSTYPE" == "darwin"* ]]; then
            sed -i '' 's/source="torch_cuda121"/source="torchcpu"/g' pyproject.toml
          else
            sed -i 's/source="torch_cuda121"/source="torchcpu"/g' pyproject.toml
          fi
          python -m pip install --upgrade pip setuptools wheel uv
          uv sync --group yolo

      - name: Test pose tracking
        run: |
          source .venv/bin/activate
          boxmot track \
            --yolo-model weights/yolov8n-pose.pt \
            --imgsz 320 \
            --source $IMG

  tracking-with-yolos:
    runs-on: ubuntu-latest
    env:
      UV_CACHE_DIR: ${{ github.workspace }}/.cache/uv
      IMG: ./assets/MOT17-mini/train/MOT17-02-FRCNN/img1/000001.jpg
    steps:
      - uses: actions/checkout@v4

      - name: Restore pip, venv & uv caches
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ./.venv
            ${{ env.UV_CACHE_DIR }}
          key: deps-${{ runner.os }}-py3.11-${{ hashFiles('**/pyproject.toml','**/uv.lock') }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies & build deps
        run: |
          if [[ "$OSTYPE" == "darwin"* ]]; then
            sed -i '' 's/source="torch_cuda121"/source="torchcpu"/g' pyproject.toml
          else
            sed -i 's/source="torch_cuda121"/source="torchcpu"/g' pyproject.toml
          fi
          python -m pip install --upgrade pip setuptools wheel uv
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
          uv sync --only-group yolox-build-deps
          uv sync --group yolo

      - name: Test various YOLOs
        run: |
          source .venv/bin/activate
          uv pip list
          boxmot track --yolo-model yolov10n.pt --imgsz 320 --source $IMG
          boxmot track --yolo-model yolox_n.pt --imgsz 320 320 --source $IMG
          boxmot track --yolo-model rf-detr-base.pt --imgsz 320 --source $IMG

  tracking-with-seg:
    runs-on: ubuntu-latest
    env:
      UV_CACHE_DIR: ${{ github.workspace }}/.cache/uv
      IMG: ./assets/MOT17-mini/train/MOT17-02-FRCNN/img1/000001.jpg
    steps:
      - uses: actions/checkout@v4

      - name: Restore pip, venv & uv caches
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ./.venv
            ${{ env.UV_CACHE_DIR }}
          key: deps-${{ runner.os }}-py3.12-${{ hashFiles('**/pyproject.toml','**/uv.lock') }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          if [[ "$OSTYPE" == "darwin"* ]]; then
            sed -i '' 's/source="torch_cuda121"/source="torchcpu"/g' pyproject.toml
          else
            sed -i 's/source="torch_cuda121"/source="torchcpu"/g' pyproject.toml
          fi
          python -m pip install --upgrade pip setuptools wheel uv
          uv sync --group yolo

      - name: Test seg tracking
        run: |
          source .venv/bin/activate
          boxmot track \
            --tracking-method deepocsort \
            --yolo-model yolov8n-seg.pt \
            --source $IMG

  export-reid-models:
    runs-on: ubuntu-latest
    env:
      UV_CACHE_DIR: ${{ github.workspace }}/.cache/uv
    steps:
      - uses: actions/checkout@v4

      - name: Restore pip, venv & uv caches
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ./.venv
            ${{ env.UV_CACHE_DIR }}
          key: deps-${{ runner.os }}-py3.11-${{ hashFiles('**/pyproject.toml','**/uv.lock') }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies & uv cache all groups
        run: |
          if [[ "$OSTYPE" == "darwin"* ]]; then
            sed -i '' 's/source="torch_cuda121"/source="torchcpu"/g' pyproject.toml
          else
            sed -i 's/source="torch_cuda121"/source="torchcpu"/g' pyproject.toml
          fi
          sudo apt-get update && sudo apt-get install -y flatbuffers-compiler
          wget https://github.com/PINTO0309/onnx2tf/releases/download/1.16.31/flatc.tar.gz
          tar -zxvf flatc.tar.gz
          sudo mv flatc /usr/bin/
          python -m pip install --upgrade pip setuptools wheel uv
          uv sync --all-groups

      - name: Test export models
        run: |
          source .venv/bin/activate
          python boxmot/appearance/reid/export.py \
            --include torchscript onnx openvino tflite \
            --device cpu \
            --batch-size 3 \
            --dynamic

      - name: Check TFLite exports
        run: |
          ls boxmot/engine/weights/osnet_x0_25_msmt17_saved_model/

      - name: Inference on exports
        run: |
          source .venv/bin/activate
          for fmt in torchscript onnx openvino_model tflite; do
            boxmot track --reid-model boxmot/engine/weights/osnet_x0_25_msmt17.${fmt} --imgsz 320 --source ./assets/MOT17-mini/train/MOT17-02-FRCNN/img1/000001.jpg
          done

  tests:
    runs-on: ubuntu-latest
    env:
      UV_CACHE_DIR: ${{ github.workspace }}/.cache/uv
    steps:
      - uses: actions/checkout@v4

      - name: Restore pip, venv & uv caches
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ./.venv
            ${{ env.UV_CACHE_DIR }}
          key: deps-${{ runner.os }}-py3.11-${{ hashFiles('**/pyproject.toml','**/uv.lock') }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install & test dependencies
        run: |
          if [[ "$OSTYPE" == "darwin"* ]]; then
            sed -i '' 's/source="torch_cuda121"/source="torchcpu"/g' pyproject.toml
          else
            sed -i 's/source="torch_cuda121"/source="torchcpu"/g' pyproject.toml
          fi
          python -m pip install --upgrade pip uv
          uv pip install -e . --system --group test --group yolo --group onnx --group openvino --group tflite

      - name: Export-check & Pytest
        run: |
          python boxmot/appearance/reid/export.py --include torchscript onnx openvino --device cpu --batch-size 3 --dynamic
          pytest --cov=boxmot --cov-report=html -v -s tests
          coverage report --fail-under=25

  check-failures:
    needs:
      - tracking-methods
      - mot-metrics-benchmark
      - evolution
      - export-reid-models
      - tests
      - tracking-with-pose
      - tracking-with-seg
      - tracking-with-yolos
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Prepare env vars
        run: |
          for job in tracking-methods mot-metrics evolution export-reid-models tests tracking-with-pose tracking-with-seg tracking-with-yolos; do
            echo "${job}_STATUS=${{ needs[ job ].result }}" >> $GITHUB_ENV
          done

      - name: Check for failures & summarize
        run: |
          summary="" failed=false
          for var in $(printenv | grep '_STATUS='); do
            name=${var%%=*}; status=${var##*=}
            if [[ "$status" != "success" ]]; then
              summary+="$name failed with $status\n"; failed=true
            fi
          done
          if ! $failed; then summary="All jobs succeeded."; fi
          echo -e "Summary:\n$summary"
