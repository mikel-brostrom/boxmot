# =====================================================
# pyproject.toml for BoxMOT ← UV (Option A: pin TRT to cu12 series)
# =====================================================

#######################
# Alternative Indexes #
#######################

[[tool.uv.index]]
name     = "torch-cpu"
url      = "https://download.pytorch.org/whl/cpu"
explicit = true

[[tool.uv.index]]
name     = "torch-gpu"
url      = "https://download.pytorch.org/whl/cu121"
explicit = true

# NVIDIA packages (TensorRT, etc.)
[[tool.uv.index]]
name     = "nvidia"
url      = "https://pypi.nvidia.com"
explicit = true

##################################
# Pin torch/vision to *an* index #
##################################

[tool.uv.sources]
torch = [
  { index = "torch-cpu", marker = "sys_platform == 'darwin'" },
  { index = "torch-gpu", marker = "sys_platform == 'linux' or sys_platform == 'win32'" },
]
torchvision = [
  { index = "torch-cpu", marker = "sys_platform == 'darwin'" },
  { index = "torch-gpu", marker = "sys_platform == 'linux' or sys_platform == 'win32'" },
]

# Route TensorRT packages to NVIDIA’s index (never on Darwin)
tensorrt = [
  { index = "nvidia", marker = "sys_platform != 'darwin'" },
]
"tensorrt-cu12" = [
  { index = "nvidia", marker = "sys_platform != 'darwin'" },
]
"tensorrt-cu12-libs" = [
  { index = "nvidia", marker = "sys_platform != 'darwin'" },
]

#########################
# UV project settings   #
#########################

[tool.uv]
# Auto-install GPU group (no --extra needed)
default-groups = ["dev", "gpu"]

# Pin TensorRT to the CUDA 12 series so it matches torch cu121
constraint-dependencies = ["tensorrt>=10.12,<10.13"]

#########################
# UV-specific Overrides #
#########################

# Override yolox's outdated dependencies
[[tool.uv.dependency-metadata]]
name          = "yolox"
version       = "0.3.0"
requires-dist = ["onnx>=1.17.0", "onnxsim<1.0.0,>=0.4.36"]

# Ensure yolox builds with setuptools present in the isolated build env
[tool.uv.extra-build-dependencies]
yolox = ["setuptools", "torch<3.0.0,>=2.2.1"]

# Prevent uv from building TRT sdists on macOS; provide version-scoped static metadata for cu12
[[tool.uv.dependency-metadata]]
name = "tensorrt"
version = "10.12.*"
requires-dist = [
  "tensorrt-cu12 ; (sys_platform == 'linux' or sys_platform == 'win32')",
]

[[tool.uv.dependency-metadata]]
name = "tensorrt-cu12"
version = "10.12.*"
# Let uv choose a matching cu12 libs version, or pin if you prefer: ==10.12.*
requires-dist = [
  "tensorrt-cu12-libs ; (sys_platform == 'linux' or sys_platform == 'win32')",
]

# Terminal package; empty deps to avoid wheel-stub builds on Darwin
[[tool.uv.dependency-metadata]]
name = "tensorrt-cu12-libs"
requires-dist = []

############
# Flake8   #
############

[tool.flake8]
max-line-length = 120
exclude         = [".tox", "*.egg", "build", "temp"]
select          = ["E", "W", "F"]
doctests        = true
verbose         = 2
format          = "pylint"
ignore          = ["E731", "F405", "E402", "W504", "W605", "E741"]

##############
# Build System #
##############

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

###########
# Project #
###########

[project]
name            = "boxmot"
version         = "15.0.9"
description     = "BoxMOT: pluggable SOTA tracking modules for segmentation, object detection and pose estimation models"
readme          = "README.md"
requires-python = ">=3.9,<=3.13"
license         = { text = "AGPL-3.0" }

authors = [
  { name = "Mikel Broström" },
]

classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Intended Audience :: Education",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Software Development",
  "Topic :: Scientific/Engineering",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Scientific/Engineering :: Image Recognition",
  "Topic :: Scientific/Engineering :: Image Processing",
]

keywords = [
  "tracking",
  "tracking-by-detection",
  "machine-learning",
  "deep-learning",
  "vision",
  "ML",
  "DL",
  "AI",
  "YOLO",
]

dependencies = [
  # Kalman filters for motion models (SORT/OCSort/HybridSort)
  "filterpy<2.0.0,>=1.4.5",
  # Download pretrained weights/checkpoints from Google Drive
  "gdown<6.0.0,>=5.1.0",
  # Fast LAP/Hungarian solver for data association
  "lapx<1.0.0,>=0.5.5",
  "loguru<1.0.0,>=0.7.2",
  "numpy",
  "regex<2025.0.0,>=2024.0.0",

  "scikit-learn<2.0.0,>=1.3.0",
  "pandas<3.0.0,>=2.0.0",
  "opencv-python<5.0.0,>=4.7.0",

  "torch>=2.2.1,<3.0.0",
  "torchvision>=0.17.1,<1.0.0",
  "click>=8.1.8",

  # clip reid needs
  "ftfy<7.0.0,>=6.1.3",
  "yacs<1.0.0,>=0.1.8",
]

[project.scripts]
boxmot = "boxmot.engine.cli:main"

########################################
# local-only “dev/test/docs/ci” stacks #
########################################

[dependency-groups]
dev  = ["ipykernel>=6.29.5,<7.0.0"]
test = ["pytest>=8.0.2,<9.0.0", "pytest-cov>=6.0.0,<7.0.0", "isort>=5.13.2,<6.0.0"]
docs = [
  "mkdocs>=1.6.1", "mkdocs-click>=0.9.0",
  "mkdocs-include-markdown-plugin>=7.1.6",
  "mkdocs-material>=9.6.15",
  "mkdocstrings>=0.30.0", "mkdocstrings-python>=1.16.12",
]

#############################
# runtime / feature toggles #
#############################

[project.optional-dependencies]
yolo = ["ultralytics>=3.8.200"]

evolve = [
  "ray>=2.35.0,<3.0.0",
  "ray[tune]>=2.35.0,<3.0.0",
  "plotly>=5.19.0,<6.0.0",
  "bayesian-optimization>=2.0.4",
  "optuna"
]

onnx = [
  "onnx>=1.16.1,<1.19",
  "onnxruntime>=1.20.0",
  "onnxslim>=0.1.67"
]

openvino = ["openvino>=2025.2.0"]

tflite = [
  "onnx2tf>=1.18.0",
  "onnx>=1.16.1",
  "tensorflow==2.17.0",
  "tf_keras",
  "sng4onnx>=1.0.1",
  "onnx_graphsurgeon>=0.3.26",
  "onnxslim>=0.1.31",
  "onnxruntime",
  "flatbuffers>=23.5.26",
  "onnxsim==0.4.33",
  "psutil==5.9.5",
  "ml_dtypes==0.3.2",
  # Windows lacks wheels — exclude on win32
  "ai_edge_litert>=1.2.0 ; sys_platform != 'win32'",
]

tensorrt = [
  # Request TRT on Linux/Windows; version pinned by constraint-dependencies above
  "tensorrt>7.0.0 ; (sys_platform == 'linux' or sys_platform == 'win32')",
]